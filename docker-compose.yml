# service = container
services:

  # service name (ほかから参照するとき使うので重要です。)
  mysql-service:
    # NOTE: container name conflict を防ぐため mrrhp- をつけている。
    container_name: mrrhp-mysql-container
    build:
      context: ./mrrhp-mysql-container
      dockerfile: Dockerfile
    # NOTE: 他のプロジェクトの mysql との重複を避けるため、変更している。
    ports:
      - 3360:3306
    volumes:
      - ./db/mysql_data:/var/lib/mysql
      - ./db/mysql_log:/var/log/mysql
      - ./db/mysql_conf:/etc/mysql/conf.d
    # NOTE: 開発環境では .env を使うし、本番環境では .env を (GitHub Actions が) 上書きして使うことを想定。
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}

  django-service:
    # NOTE: container name conflict を防ぐため mrrhp- をつけている。
    container_name: mrrhp-v4-django-container
    build:
      context: ./mrrhp-v4-django-container
      dockerfile: Dockerfile
    # NOTE: 他のプロジェクトの django との重複を避けるため、変更している。
    ports:
      - 8901:8000
    # tty, stdin_open しておくと exec するときに -it がいらないみたい。
    tty: true
    stdin_open: true
    volumes:
      - ./app/mrrhp-apache:/app
      # pipenv 仮想環境をホストと共有。
      - ./python-packages:/root/.local/share
    # NOTE: 開発環境では .env を使うし、本番環境では .env を (GitHub Actions が) 上書きして使うことを想定。
    environment:
      # Pipenv 仮想環境を webapp ディレクトリ内に作るための設定。
      - PIPENV_VENV_IN_PROJECT=${PIPENV_VENV_IN_PROJECT}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_HOSTNAME=${MYSQL_HOSTNAME}
      - MYSQL_PORT=${MYSQL_PORT}
      - APP_HOST=${APP_HOST}
    depends_on:
      - mysql-service

  # NOTE: ここに mrrhp-v4-django-container を作る予定。
